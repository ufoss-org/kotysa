dependencies {
    api project(':kotysa-core')

    // import BOMs
    implementation platform("org.springframework:spring-framework-bom:$spring_core_version")
    testImplementation platform("org.testcontainers:testcontainers-bom:$testcontainers_bom_version")
    testImplementation platform("org.springframework.boot:spring-boot-dependencies:$spring_boot_version")

    api "io.projectreactor.kotlin:reactor-kotlin-extensions:$reactor_kotlin_extension_version"

    implementation 'org.springframework:spring-r2dbc'
    implementation 'org.jetbrains.kotlin:kotlin-reflect'

    compileOnly 'org.jetbrains.kotlinx:kotlinx-coroutines-core'
    compileOnly "org.jetbrains.kotlinx:kotlinx-datetime:$kotlinx_datetime_version"

    testImplementation testFixtures(project(':kotysa-core'))

    testImplementation "org.springframework.fu:spring-fu-kofu:$spring_fu_version"
    testImplementation 'org.springframework.data:spring-data-r2dbc'
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation 'io.r2dbc:r2dbc-h2'
    testImplementation 'io.r2dbc:r2dbc-postgresql'
    testImplementation 'org.testcontainers:postgresql'
    testImplementation 'dev.miku:r2dbc-mysql'
    testImplementation 'org.testcontainers:mysql'
    // needed to start mysql testcontainer
    testImplementation "mysql:mysql-connector-java"
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-reactor'
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test'
    testImplementation "org.jetbrains.kotlinx:kotlinx-datetime:$kotlinx_datetime_version"

    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
}

compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ['-Xjsr305=strict', '-Xjvm-default=enable', '-Xexplicit-api=strict', '-Xinline-classes']
        jvmTarget = '1.8'
    }
}

compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ['-Xjsr305=strict', '-Xjvm-default=enable']
        jvmTarget = '1.8'
    }
}

tasks.dokkaHtml.configure {
    dokkaSourceSets {
        configureEach {
            externalDocumentationLink {
                url.set(URL("https://docs.spring.io/spring-data/r2dbc/docs/1.0.x/api/"))
            }
        }
    }
}
